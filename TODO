TODO FOR SHADOW ENGINE

	- Implementing Deno for the plugin system? It's got built in permissions, native TypeScript support, ships as a single executable, WebSockets Supported.

	- Finish Popups (add button support similar to electron)
	- Finish lockdownPlugins function and the rest of the plugins permission system

	- Port new IPC Passthrough function to decoration types other than undecorated -- DONE
	- Fix require is not defined on pluginInstaller -- DONE


Shadow API: (Does not require permission)

	shadow.config.modConfigFile		(allows plugin to modify config file as long as it has proper write permissions)
	shadow.config.readConfigFile	(allows plugin to read config file as long as it has proper read permissions)
	shadow.config.getEngineConfig	(allows plugin to read engine configuration regardless if it has read permissions or not)
	
	shadow.utils.getEngineVersion	(You can guess this one)
	shadow.utils.getLineEnding		(Gets line ending for input)
	shaodw.utils.createErrorPopup	(You can guess this one)

Possible plugin permissions:
	
	shadow.downloadManager			(uses electron-download-manager)

	deno.danger.all (DANGER: THIS BYPASSES E V E R Y T H I N G AND EVEN ALLOWS FOR PERMISSIONS THAT SHADOW DOESN'T SUPPORT LIKE DENO PLUGINS)
	deno.danger.run (DANGER: This allows the plugin to spawn subprocesses which can bypass Shadow's restrictions)
	deno.env		(Environment variable access)
	deno.hrtime		(High-Resolution Time Measurement, can be used for fingerprinting according to the deno manual 0_o )
	deno.net.all	(Allow all network access, see allowedDomains in plug.sec for specific network access)
	deno.read.all	(Allow all filesystem read access, see allowedReadPaths in plug.sec for specific path read access)
	deno.write.all	(Allow all filesystem write access, see allowedWritePaths in plug.sec for specific path write access)

Use this code for dropping files into the content browser:
	document.addEventListener('drop', (event) => {
	event.preventDefault();
	event.stopPropagation();

	for (const f of event.dataTransfer.files) {
		// Using the path attribute to get absolute file path
		console.log('File Path of dragged files: ', f.path)
	}
});

document.addEventListener('dragover', (e) => {
	e.preventDefault();
	e.stopPropagation();
});

document.addEventListener('dragenter', (event) => {
	console.log('File is in the Drop Space');
});

document.addEventListener('dragleave', (event) => {
	console.log('File has left the Drop Space');
});